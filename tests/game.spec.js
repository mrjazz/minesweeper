// jest.dontMock('../js/game');
// var game = require('../js/game');

import Game from '../src/game.js';

describe('game', function() {
    it('game init', function() {            	
        var map = Game.init();        
        expect(map.length).toBe(10);
        expect(map[0].length).toBe(10);
    });

   it('game shoot', function() {
       var map = [
           [ -1, 9, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, 9, -1, -1, -1, -1, -1, -1, 9, -1 ],
           [ -1, 9, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, 9 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, 9 ],
           [ -1, -1, -1, -1, 9, -1, -1, 9, -1, -1 ],
           [ 9, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ]
       ];

       expect(Game.shoot(map, -1, -1)[0]).toBe("none");
       expect(Game.shoot(map, 10, 10)[0]).toBe("none");
       expect(Game.shoot(map, 0, 0)[0]).toBe(2);
       // expect(Game.shoot(map, 0, 1)[0]).toBe(3);
       // expect(Game.shoot(map, 0, 2)[0]).toBe(2);
       // expect(Game.shoot(map, 0, 3)[0]).toBe(1);
       // expect(Game.shoot(map, 0, 4)[0]).toBe(0);
       // expect(Game.shoot(map, 2, 1)[0]).toBe(5);
       // expect(Game.shoot(map, 9, 1)[0]).toBe(1);
       expect(Game.shoot(map, 1, 0)[0]).toBe("fail");        
   });

   it('game shoot2', function() {
       var map = [
           [ -1, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ 9, 9, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ]
       ];

       var result = Game.shoot(map, 0, 0);        
       expect(result[0]).toBe(0); // nothing
       expect(result[1][0][0]).toBe(0);
   });

   it('game shoot2', function() {
       var map = [
           [ -1, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ 9, 9, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ]
       ];

       var updates = Game.getUpdatesForShoot(map, 0, 0);
       var result_map = Game.applyUpdate(map, updates);
       //console.log(result_map);
       expect(result_map[0][0]).toBe(0); // nothing
       expect(result_map[0][1]).toBe(2);
       expect(result_map[1][0]).toBe(0);
       expect(result_map[1][1]).toBe(3);
       expect(result_map[2][0]).toBe(2);
       expect(result_map[2][1]).toBe(5);        
   });

   it('apply update1', function() {
       var map = [
           [ -1, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ 9, 9, 9, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ]
       ];

       var result = Game.applyUpdate(map, [{x:1, y:1, v:2}]);        
       expect(result[1][1]).toBe(2);
   });

   it('apply update2', function() {
       var map = [
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1,  9,  9,  9,  9 ],
           [ -1, -1, -1, -1, -1, -1,  9, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1,  9, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1,  9, -1, -1, -1 ]
       ];

       var result = Game.applyUpdate(map, [{x:9, y:9, v:0}]);        
       expect(result[9][9]).toBe(0);
   });

   it('game shoot3', function() {
       var map = [
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1,  9,  9,  9,  9 ],
           [ -1, -1, -1, -1, -1, -1,  9, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1,  9, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1,  9, -1, -1, -1 ]
       ];

       var updates = Game.getUpdatesForShoot(map, 9, 9);        
       var result_map = Game.applyUpdate(map, updates);

       expect(result_map[9][9]).toBe(0);
       expect(result_map[9][8]).toBe(0);
       expect(result_map[9][7]).toBe(2);

       expect(result_map[8][9]).toBe(0);
       expect(result_map[8][8]).toBe(0);
       expect(result_map[8][7]).toBe(3);

       expect(result_map[7][9]).toBe(2);
       expect(result_map[7][8]).toBe(3);
       expect(result_map[7][7]).toBe(5);                
   });

   it('checkWin', function() {
       var map = [
           [ 9, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ]
       ];        
       expect(Game.checkWin(map)).toBe(99);
   });

   it('openDemined', function() {
       var map = [
           [  9,  1, -1, -1, -1, -1, -1,  1, -1, -1 ],
           [  1,  1, -1, -1, -1, -1, -1, -1,  9,  1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1,  1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ]
       ];

       expect(Game.howManyAround(-1, map, 0, 0)).toBe(0);
       expect(map[1][8]).toBe(9);
       expect(Game.howManyAround(-1, map, 8, 1)).toBe(5);

       map = Game.openDemined(map);
       expect(map[0][0]).toBe(10);
   });

   it('openDemined2', function() {
       var map = [
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1,  1, -1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1,  3,  1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1,  9,  1, -1 ],
           [ -1, -1, -1,  2,  2,  1,  2,  2,  1, -1 ],
           [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ]
       ];
       
      expect(map[7][7]).toBe(9);
      expect(Game.howManyAround(-1, map, 7, 7)).toBe(2);

      map = Game.openDemined(map);
      expect(map[7][7]).toBe(9); 

   });

});
